/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  REUNION_DateTime: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  REUNION_JSON: any;
  /** The `Upload` scalar type represents a file upload. */
  REUNION_Upload: any;
  REUNION_WebpagePageComponentsDynamicZoneInput: any;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GraphQLSource = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fieldName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly typeName: Maybe<Scalars['String']>;
};

type GraphQLSourceConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GraphQLSourceEdge>;
  readonly group: ReadonlyArray<GraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GraphQLSourceConnection_distinctArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceConnection_groupArgs = {
  field: GraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GraphQLSourceConnection_maxArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceConnection_minArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceConnection_sumArgs = {
  field: GraphQLSourceFieldSelector;
};

type GraphQLSourceEdge = {
  readonly next: Maybe<GraphQLSource>;
  readonly node: GraphQLSource;
  readonly previous: Maybe<GraphQLSource>;
};

type GraphQLSourceFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fieldName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly typeName: InputMaybe<FieldSelectorEnum>;
};

type GraphQLSourceFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fieldName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly typeName: InputMaybe<StringQueryOperatorInput>;
};

type GraphQLSourceGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GraphQLSourceEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GraphQLSourceGroupConnection_distinctArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceGroupConnection_groupArgs = {
  field: GraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GraphQLSourceGroupConnection_maxArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceGroupConnection_minArgs = {
  field: GraphQLSourceFieldSelector;
};


type GraphQLSourceGroupConnection_sumArgs = {
  field: GraphQLSourceFieldSelector;
};

type GraphQLSourceSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fieldName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly typeName: InputMaybe<SortOrderEnum>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGraphQlSource: GraphQLSourceConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly graphQlSource: Maybe<GraphQLSource>;
  readonly reunion: REUNION;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allGraphQlSourceArgs = {
  filter: InputMaybe<GraphQLSourceFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GraphQLSourceSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_graphQlSourceArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fieldName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  typeName: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type REUNION = {
  readonly breakpoint: Maybe<REUNION_BreakpointEntityResponse>;
  readonly breakpoints: Maybe<REUNION_BreakpointEntityResponseCollection>;
  readonly footer: Maybe<REUNION_FooterEntityResponse>;
  readonly footers: Maybe<REUNION_FooterEntityResponseCollection>;
  readonly header: Maybe<REUNION_HeaderEntityResponse>;
  readonly headers: Maybe<REUNION_HeaderEntityResponseCollection>;
  readonly i18NLocale: Maybe<REUNION_I18NLocaleEntityResponse>;
  readonly i18NLocales: Maybe<REUNION_I18NLocaleEntityResponseCollection>;
  readonly me: Maybe<REUNION_UsersPermissionsMe>;
  readonly menuItem: Maybe<REUNION_MenuItemEntityResponse>;
  readonly menuItems: Maybe<REUNION_MenuItemEntityResponseCollection>;
  readonly uploadFile: Maybe<REUNION_UploadFileEntityResponse>;
  readonly uploadFiles: Maybe<REUNION_UploadFileEntityResponseCollection>;
  readonly uploadFolder: Maybe<REUNION_UploadFolderEntityResponse>;
  readonly uploadFolders: Maybe<REUNION_UploadFolderEntityResponseCollection>;
  readonly usersPermissionsRole: Maybe<REUNION_UsersPermissionsRoleEntityResponse>;
  readonly usersPermissionsRoles: Maybe<REUNION_UsersPermissionsRoleEntityResponseCollection>;
  readonly usersPermissionsUser: Maybe<REUNION_UsersPermissionsUserEntityResponse>;
  readonly usersPermissionsUsers: Maybe<REUNION_UsersPermissionsUserEntityResponseCollection>;
  readonly webpage: Maybe<REUNION_WebpageEntityResponse>;
  readonly webpages: Maybe<REUNION_WebpageEntityResponseCollection>;
  readonly website: Maybe<REUNION_WebsiteEntityResponse>;
  readonly websiteAsset: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly websiteAssets: Maybe<REUNION_WebsiteAssetEntityResponseCollection>;
  readonly websites: Maybe<REUNION_WebsiteEntityResponseCollection>;
};


type REUNION_breakpointArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_breakpointsArgs = {
  filters: InputMaybe<REUNION_BreakpointFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_footerArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_footersArgs = {
  filters: InputMaybe<REUNION_FooterFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_headerArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_headersArgs = {
  filters: InputMaybe<REUNION_HeaderFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_i18NLocaleArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_i18NLocalesArgs = {
  filters: InputMaybe<REUNION_I18NLocaleFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_menuItemArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_menuItemsArgs = {
  filters: InputMaybe<REUNION_MenuItemFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_uploadFileArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_uploadFilesArgs = {
  filters: InputMaybe<REUNION_UploadFileFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_uploadFolderArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_uploadFoldersArgs = {
  filters: InputMaybe<REUNION_UploadFolderFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_usersPermissionsRoleArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_usersPermissionsRolesArgs = {
  filters: InputMaybe<REUNION_UsersPermissionsRoleFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_usersPermissionsUserArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_usersPermissionsUsersArgs = {
  filters: InputMaybe<REUNION_UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_webpageArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_webpagesArgs = {
  filters: InputMaybe<REUNION_WebpageFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_websiteArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_websiteAssetArgs = {
  id: InputMaybe<Scalars['ID']>;
};


type REUNION_websiteAssetsArgs = {
  filters: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_websitesArgs = {
  filters: InputMaybe<REUNION_WebsiteFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_BooleanFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly contains: InputMaybe<Scalars['Boolean']>;
  readonly containsi: InputMaybe<Scalars['Boolean']>;
  readonly endsWith: InputMaybe<Scalars['Boolean']>;
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly eqi: InputMaybe<Scalars['Boolean']>;
  readonly gt: InputMaybe<Scalars['Boolean']>;
  readonly gte: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly lt: InputMaybe<Scalars['Boolean']>;
  readonly lte: InputMaybe<Scalars['Boolean']>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly not: InputMaybe<REUNION_BooleanFilterInput>;
  readonly notContains: InputMaybe<Scalars['Boolean']>;
  readonly notContainsi: InputMaybe<Scalars['Boolean']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly startsWith: InputMaybe<Scalars['Boolean']>;
};

type REUNION_Breakpoint = {
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly device_name: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly width: Maybe<Scalars['String']>;
};

type REUNION_BreakpointEntity = {
  readonly attributes: Maybe<REUNION_Breakpoint>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_BreakpointEntityResponse = {
  readonly data: Maybe<REUNION_BreakpointEntity>;
};

type REUNION_BreakpointEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_BreakpointEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_BreakpointFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_BreakpointFiltersInput>>>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly device_name: InputMaybe<REUNION_StringFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_BreakpointFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_BreakpointFiltersInput>>>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly width: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_BreakpointInput = {
  readonly device_name: InputMaybe<Scalars['String']>;
  readonly label: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly width: InputMaybe<Scalars['String']>;
};

type REUNION_ComponentPageContentButton = {
  readonly icon: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly id: Scalars['ID'];
  readonly label: Maybe<Scalars['String']>;
};

type REUNION_ComponentPageContentCard = {
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly label: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type REUNION_ComponentPageContentCardFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentCardFiltersInput>>>;
  readonly description: InputMaybe<REUNION_StringFilterInput>;
  readonly image: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_ComponentPageContentCardFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentCardFiltersInput>>>;
  readonly subtitle: InputMaybe<REUNION_StringFilterInput>;
  readonly title: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_ComponentPageContentFooterColumn = {
  readonly id: Scalars['ID'];
  readonly item: Maybe<ReadonlyArray<Maybe<REUNION_ComponentPageContentLink>>>;
  readonly label: Maybe<Scalars['String']>;
};


type REUNION_ComponentPageContentFooterColumn_itemArgs = {
  filters: InputMaybe<REUNION_ComponentPageContentLinkFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_ComponentPageContentFooterColumnFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentFooterColumnFiltersInput>>>;
  readonly item: InputMaybe<REUNION_ComponentPageContentLinkFiltersInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_ComponentPageContentFooterColumnFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentFooterColumnFiltersInput>>>;
};

type REUNION_ComponentPageContentFooterColumnInput = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly item: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentLinkInput>>>;
  readonly label: InputMaybe<Scalars['String']>;
};

type REUNION_ComponentPageContentForm = {
  readonly button: Maybe<REUNION_ComponentPageContentButton>;
  readonly icon: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly input: Maybe<ReadonlyArray<Maybe<REUNION_ComponentPageContentInputBox>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};


type REUNION_ComponentPageContentForm_inputArgs = {
  filters: InputMaybe<REUNION_ComponentPageContentInputBoxFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_ComponentPageContentHeroSection = {
  readonly button_text: Maybe<Scalars['String']>;
  readonly header: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly label: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<Scalars['String']>;
};

type REUNION_ComponentPageContentHighlightSection = {
  readonly button_text: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly label: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type REUNION_ComponentPageContentInputBox = {
  readonly helper_text: Maybe<Scalars['String']>;
  readonly icon: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly id: Scalars['ID'];
  readonly label: Maybe<Scalars['String']>;
  readonly placeholder: Maybe<Scalars['String']>;
};

type REUNION_ComponentPageContentInputBoxFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentInputBoxFiltersInput>>>;
  readonly helper_text: InputMaybe<REUNION_StringFilterInput>;
  readonly icon: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_ComponentPageContentInputBoxFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentInputBoxFiltersInput>>>;
  readonly placeholder: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_ComponentPageContentLink = {
  readonly icon: Maybe<REUNION_UploadFileEntityResponse>;
  readonly id: Scalars['ID'];
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type REUNION_ComponentPageContentLinkFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentLinkFiltersInput>>>;
  readonly not: InputMaybe<REUNION_ComponentPageContentLinkFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentLinkFiltersInput>>>;
  readonly text: InputMaybe<REUNION_StringFilterInput>;
  readonly url: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_ComponentPageContentLinkInput = {
  readonly icon: InputMaybe<Scalars['ID']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly text: InputMaybe<Scalars['String']>;
  readonly url: InputMaybe<Scalars['String']>;
};

type REUNION_ComponentPageContentListOfCards = {
  readonly id: Scalars['ID'];
  readonly item: Maybe<ReadonlyArray<Maybe<REUNION_ComponentPageContentCard>>>;
  readonly label: Maybe<Scalars['String']>;
};


type REUNION_ComponentPageContentListOfCards_itemArgs = {
  filters: InputMaybe<REUNION_ComponentPageContentCardFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_ComponentPageContentSection = {
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly label: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type REUNION_ComponentSharedMetaSocial = {
  readonly description: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<REUNION_UploadFileEntityResponse>;
  readonly socialNetwork: REUNION_ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK;
  readonly title: Scalars['String'];
};

type REUNION_ComponentSharedMetaSocialFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>>>;
  readonly description: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>>>;
  readonly socialNetwork: InputMaybe<REUNION_StringFilterInput>;
  readonly title: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_ComponentSharedMetaSocialInput = {
  readonly description: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly image: InputMaybe<Scalars['ID']>;
  readonly socialNetwork: InputMaybe<REUNION_ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK>;
  readonly title: InputMaybe<Scalars['String']>;
};

type REUNION_ComponentSharedOpenGraph = {
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type REUNION_ComponentSharedOpenGraphFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedOpenGraphFiltersInput>>>;
  readonly description: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_ComponentSharedOpenGraphFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedOpenGraphFiltersInput>>>;
  readonly title: InputMaybe<REUNION_StringFilterInput>;
  readonly type: InputMaybe<REUNION_StringFilterInput>;
  readonly url: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_ComponentSharedOpenGraphInput = {
  readonly description: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly url: InputMaybe<Scalars['String']>;
};

type REUNION_ComponentSharedSeo = {
  readonly canonicalURL: Maybe<Scalars['String']>;
  readonly follow: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly index: Maybe<Scalars['Boolean']>;
  readonly keywords: Maybe<Scalars['String']>;
  readonly metaDescription: Scalars['String'];
  readonly metaImage: REUNION_UploadFileEntityResponse;
  readonly metaRobots: Maybe<Scalars['String']>;
  readonly metaSocial: Maybe<ReadonlyArray<Maybe<REUNION_ComponentSharedMetaSocial>>>;
  readonly metaTitle: Scalars['String'];
  readonly metaViewport: Maybe<Scalars['String']>;
  readonly openGraph: Maybe<ReadonlyArray<Maybe<REUNION_ComponentSharedOpenGraph>>>;
  readonly structuredData: Maybe<Scalars['REUNION_JSON']>;
};


type REUNION_ComponentSharedSeo_metaSocialArgs = {
  filters: InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_ComponentSharedSeo_openGraphArgs = {
  filters: InputMaybe<REUNION_ComponentSharedOpenGraphFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_ComponentSharedSeoFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedSeoFiltersInput>>>;
  readonly canonicalURL: InputMaybe<REUNION_StringFilterInput>;
  readonly follow: InputMaybe<REUNION_BooleanFilterInput>;
  readonly index: InputMaybe<REUNION_BooleanFilterInput>;
  readonly keywords: InputMaybe<REUNION_StringFilterInput>;
  readonly metaDescription: InputMaybe<REUNION_StringFilterInput>;
  readonly metaRobots: InputMaybe<REUNION_StringFilterInput>;
  readonly metaSocial: InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>;
  readonly metaTitle: InputMaybe<REUNION_StringFilterInput>;
  readonly metaViewport: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_ComponentSharedSeoFiltersInput>;
  readonly openGraph: InputMaybe<REUNION_ComponentSharedOpenGraphFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedSeoFiltersInput>>>;
  readonly structuredData: InputMaybe<REUNION_JSONFilterInput>;
};

type REUNION_ComponentSharedSeoInput = {
  readonly canonicalURL: InputMaybe<Scalars['String']>;
  readonly follow: InputMaybe<Scalars['Boolean']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly index: InputMaybe<Scalars['Boolean']>;
  readonly keywords: InputMaybe<Scalars['String']>;
  readonly metaDescription: InputMaybe<Scalars['String']>;
  readonly metaImage: InputMaybe<Scalars['ID']>;
  readonly metaRobots: InputMaybe<Scalars['String']>;
  readonly metaSocial: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedMetaSocialInput>>>;
  readonly metaTitle: InputMaybe<Scalars['String']>;
  readonly metaViewport: InputMaybe<Scalars['String']>;
  readonly openGraph: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedOpenGraphInput>>>;
  readonly structuredData: InputMaybe<Scalars['REUNION_JSON']>;
};

type REUNION_DateTimeFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_DateTime']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_DateTime']>>>;
  readonly contains: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly containsi: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly endsWith: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly eq: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly eqi: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly gt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly gte: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_DateTime']>>>;
  readonly lt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly lte: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly ne: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly not: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly notContains: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly notContainsi: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_DateTime']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_DateTime']>>>;
  readonly startsWith: InputMaybe<Scalars['REUNION_DateTime']>;
};

type REUNION_ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK =
  | 'Facebook'
  | 'Twitter';

type REUNION_ENUM_WEBSITEASSET_TYPE =
  | 'avatar'
  | 'icon'
  | 'image';

type REUNION_Error = {
  readonly code: Scalars['String'];
  readonly message: Maybe<Scalars['String']>;
};

type REUNION_FileInfoInput = {
  readonly alternativeText: InputMaybe<Scalars['String']>;
  readonly caption: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
};

type REUNION_FloatFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly contains: InputMaybe<Scalars['Float']>;
  readonly containsi: InputMaybe<Scalars['Float']>;
  readonly endsWith: InputMaybe<Scalars['Float']>;
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly eqi: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly not: InputMaybe<REUNION_FloatFilterInput>;
  readonly notContains: InputMaybe<Scalars['Float']>;
  readonly notContainsi: InputMaybe<Scalars['Float']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly startsWith: InputMaybe<Scalars['Float']>;
};

type REUNION_Footer = {
  readonly columns: Maybe<ReadonlyArray<Maybe<REUNION_ComponentPageContentFooterColumn>>>;
  readonly copyright: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly extra_footer_1: Maybe<Scalars['String']>;
  readonly extra_footer_2: Maybe<Scalars['String']>;
  readonly footer_code: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly logo: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly social: Maybe<REUNION_ComponentPageContentFooterColumn>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};


type REUNION_Footer_columnsArgs = {
  filters: InputMaybe<REUNION_ComponentPageContentFooterColumnFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_FooterEntity = {
  readonly attributes: Maybe<REUNION_Footer>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_FooterEntityResponse = {
  readonly data: Maybe<REUNION_FooterEntity>;
};

type REUNION_FooterEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_FooterEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_FooterFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_FooterFiltersInput>>>;
  readonly columns: InputMaybe<REUNION_ComponentPageContentFooterColumnFiltersInput>;
  readonly copyright: InputMaybe<REUNION_StringFilterInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly extra_footer_1: InputMaybe<REUNION_StringFilterInput>;
  readonly extra_footer_2: InputMaybe<REUNION_StringFilterInput>;
  readonly footer_code: InputMaybe<REUNION_StringFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly logo: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly not: InputMaybe<REUNION_FooterFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_FooterFiltersInput>>>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly social: InputMaybe<REUNION_ComponentPageContentFooterColumnFiltersInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_FooterInput = {
  readonly columns: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentPageContentFooterColumnInput>>>;
  readonly copyright: InputMaybe<Scalars['String']>;
  readonly extra_footer_1: InputMaybe<Scalars['String']>;
  readonly extra_footer_2: InputMaybe<Scalars['String']>;
  readonly footer_code: InputMaybe<Scalars['String']>;
  readonly label: InputMaybe<Scalars['String']>;
  readonly logo: InputMaybe<Scalars['ID']>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly social: InputMaybe<REUNION_ComponentPageContentFooterColumnInput>;
};

type REUNION_GenericMorph = REUNION_Breakpoint | REUNION_ComponentPageContentButton | REUNION_ComponentPageContentCard | REUNION_ComponentPageContentFooterColumn | REUNION_ComponentPageContentForm | REUNION_ComponentPageContentHeroSection | REUNION_ComponentPageContentHighlightSection | REUNION_ComponentPageContentInputBox | REUNION_ComponentPageContentLink | REUNION_ComponentPageContentListOfCards | REUNION_ComponentPageContentSection | REUNION_ComponentSharedMetaSocial | REUNION_ComponentSharedOpenGraph | REUNION_ComponentSharedSeo | REUNION_Footer | REUNION_Header | REUNION_I18NLocale | REUNION_MenuItem | REUNION_UploadFile | REUNION_UploadFolder | REUNION_UsersPermissionsPermission | REUNION_UsersPermissionsRole | REUNION_UsersPermissionsUser | REUNION_Webpage | REUNION_Website | REUNION_WebsiteAsset;

type REUNION_Header = {
  readonly collapsed_icon: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly extras: Maybe<REUNION_MenuItemRelationResponseCollection>;
  readonly header_code: Maybe<Scalars['String']>;
  readonly label: Maybe<Scalars['String']>;
  readonly logo: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly menu_items: Maybe<REUNION_MenuItemRelationResponseCollection>;
  readonly parent_header: Maybe<REUNION_HeaderEntityResponse>;
  readonly private_menu_items: Maybe<REUNION_MenuItemRelationResponseCollection>;
  readonly public_menu_items: Maybe<REUNION_MenuItemRelationResponseCollection>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};


type REUNION_Header_extrasArgs = {
  filters: InputMaybe<REUNION_MenuItemFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_Header_menu_itemsArgs = {
  filters: InputMaybe<REUNION_MenuItemFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_Header_private_menu_itemsArgs = {
  filters: InputMaybe<REUNION_MenuItemFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_Header_public_menu_itemsArgs = {
  filters: InputMaybe<REUNION_MenuItemFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_HeaderEntity = {
  readonly attributes: Maybe<REUNION_Header>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_HeaderEntityResponse = {
  readonly data: Maybe<REUNION_HeaderEntity>;
};

type REUNION_HeaderEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_HeaderEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_HeaderFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_HeaderFiltersInput>>>;
  readonly collapsed_icon: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly extras: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly header_code: InputMaybe<REUNION_StringFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly logo: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly menu_items: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly not: InputMaybe<REUNION_HeaderFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_HeaderFiltersInput>>>;
  readonly parent_header: InputMaybe<REUNION_HeaderFiltersInput>;
  readonly private_menu_items: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly public_menu_items: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_HeaderInput = {
  readonly collapsed_icon: InputMaybe<Scalars['ID']>;
  readonly extras: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly header_code: InputMaybe<Scalars['String']>;
  readonly label: InputMaybe<Scalars['String']>;
  readonly logo: InputMaybe<Scalars['ID']>;
  readonly menu_items: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly parent_header: InputMaybe<Scalars['ID']>;
  readonly private_menu_items: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly public_menu_items: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
};

type REUNION_I18NLocale = {
  readonly code: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly name: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};

type REUNION_I18NLocaleEntity = {
  readonly attributes: Maybe<REUNION_I18NLocale>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_I18NLocaleEntityResponse = {
  readonly data: Maybe<REUNION_I18NLocaleEntity>;
};

type REUNION_I18NLocaleEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_I18NLocaleEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_I18NLocaleFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_I18NLocaleFiltersInput>>>;
  readonly code: InputMaybe<REUNION_StringFilterInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly name: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_I18NLocaleFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_I18NLocaleFiltersInput>>>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_IDFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly contains: InputMaybe<Scalars['ID']>;
  readonly containsi: InputMaybe<Scalars['ID']>;
  readonly endsWith: InputMaybe<Scalars['ID']>;
  readonly eq: InputMaybe<Scalars['ID']>;
  readonly eqi: InputMaybe<Scalars['ID']>;
  readonly gt: InputMaybe<Scalars['ID']>;
  readonly gte: InputMaybe<Scalars['ID']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly lt: InputMaybe<Scalars['ID']>;
  readonly lte: InputMaybe<Scalars['ID']>;
  readonly ne: InputMaybe<Scalars['ID']>;
  readonly not: InputMaybe<REUNION_IDFilterInput>;
  readonly notContains: InputMaybe<Scalars['ID']>;
  readonly notContainsi: InputMaybe<Scalars['ID']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly startsWith: InputMaybe<Scalars['ID']>;
};

type REUNION_IntFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly contains: InputMaybe<Scalars['Int']>;
  readonly containsi: InputMaybe<Scalars['Int']>;
  readonly endsWith: InputMaybe<Scalars['Int']>;
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly eqi: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly not: InputMaybe<REUNION_IntFilterInput>;
  readonly notContains: InputMaybe<Scalars['Int']>;
  readonly notContainsi: InputMaybe<Scalars['Int']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly startsWith: InputMaybe<Scalars['Int']>;
};

type REUNION_JSONFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_JSON']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_JSON']>>>;
  readonly contains: InputMaybe<Scalars['REUNION_JSON']>;
  readonly containsi: InputMaybe<Scalars['REUNION_JSON']>;
  readonly endsWith: InputMaybe<Scalars['REUNION_JSON']>;
  readonly eq: InputMaybe<Scalars['REUNION_JSON']>;
  readonly eqi: InputMaybe<Scalars['REUNION_JSON']>;
  readonly gt: InputMaybe<Scalars['REUNION_JSON']>;
  readonly gte: InputMaybe<Scalars['REUNION_JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_JSON']>>>;
  readonly lt: InputMaybe<Scalars['REUNION_JSON']>;
  readonly lte: InputMaybe<Scalars['REUNION_JSON']>;
  readonly ne: InputMaybe<Scalars['REUNION_JSON']>;
  readonly not: InputMaybe<REUNION_JSONFilterInput>;
  readonly notContains: InputMaybe<Scalars['REUNION_JSON']>;
  readonly notContainsi: InputMaybe<Scalars['REUNION_JSON']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_JSON']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['REUNION_JSON']>>>;
  readonly startsWith: InputMaybe<Scalars['REUNION_JSON']>;
};

type REUNION_MenuItem = {
  readonly avatar: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly children: Maybe<REUNION_MenuItemRelationResponseCollection>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly description: Maybe<Scalars['String']>;
  readonly icon: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly image: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly label: Maybe<Scalars['String']>;
  readonly menu_code: Maybe<Scalars['String']>;
  readonly parent: Maybe<REUNION_MenuItemEntityResponse>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly redirect_url: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};


type REUNION_MenuItem_childrenArgs = {
  filters: InputMaybe<REUNION_MenuItemFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_MenuItemEntity = {
  readonly attributes: Maybe<REUNION_MenuItem>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_MenuItemEntityResponse = {
  readonly data: Maybe<REUNION_MenuItemEntity>;
};

type REUNION_MenuItemEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_MenuItemEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_MenuItemFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_MenuItemFiltersInput>>>;
  readonly avatar: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly children: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly description: InputMaybe<REUNION_StringFilterInput>;
  readonly icon: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly image: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly menu_code: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_MenuItemFiltersInput>>>;
  readonly parent: InputMaybe<REUNION_MenuItemFiltersInput>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly redirect_url: InputMaybe<REUNION_StringFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_MenuItemInput = {
  readonly avatar: InputMaybe<Scalars['ID']>;
  readonly children: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly icon: InputMaybe<Scalars['ID']>;
  readonly image: InputMaybe<Scalars['ID']>;
  readonly label: InputMaybe<Scalars['String']>;
  readonly menu_code: InputMaybe<Scalars['String']>;
  readonly parent: InputMaybe<Scalars['ID']>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly redirect_url: InputMaybe<Scalars['String']>;
};

type REUNION_MenuItemRelationResponseCollection = {
  readonly data: ReadonlyArray<REUNION_MenuItemEntity>;
};

type REUNION_Pagination = {
  readonly page: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly pageSize: Scalars['Int'];
  readonly total: Scalars['Int'];
};

type REUNION_PaginationArg = {
  readonly limit: InputMaybe<Scalars['Int']>;
  readonly page: InputMaybe<Scalars['Int']>;
  readonly pageSize: InputMaybe<Scalars['Int']>;
  readonly start: InputMaybe<Scalars['Int']>;
};

type REUNION_PublicationState =
  | 'LIVE'
  | 'PREVIEW';

type REUNION_ResponseCollectionMeta = {
  readonly pagination: REUNION_Pagination;
};

type REUNION_StringFilterInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly contains: InputMaybe<Scalars['String']>;
  readonly containsi: InputMaybe<Scalars['String']>;
  readonly endsWith: InputMaybe<Scalars['String']>;
  readonly eq: InputMaybe<Scalars['String']>;
  readonly eqi: InputMaybe<Scalars['String']>;
  readonly gt: InputMaybe<Scalars['String']>;
  readonly gte: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly lt: InputMaybe<Scalars['String']>;
  readonly lte: InputMaybe<Scalars['String']>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly not: InputMaybe<REUNION_StringFilterInput>;
  readonly notContains: InputMaybe<Scalars['String']>;
  readonly notContainsi: InputMaybe<Scalars['String']>;
  readonly notIn: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly notNull: InputMaybe<Scalars['Boolean']>;
  readonly null: InputMaybe<Scalars['Boolean']>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly startsWith: InputMaybe<Scalars['String']>;
};

type REUNION_UploadFile = {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<Scalars['REUNION_JSON']>;
  readonly hash: Scalars['String'];
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Scalars['String'];
  readonly name: Scalars['String'];
  readonly previewUrl: Maybe<Scalars['String']>;
  readonly provider: Scalars['String'];
  readonly provider_metadata: Maybe<Scalars['REUNION_JSON']>;
  readonly related: Maybe<ReadonlyArray<Maybe<REUNION_GenericMorph>>>;
  readonly size: Scalars['Float'];
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly url: Scalars['String'];
  readonly width: Maybe<Scalars['Int']>;
};

type REUNION_UploadFileEntity = {
  readonly attributes: Maybe<REUNION_UploadFile>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_UploadFileEntityResponse = {
  readonly data: Maybe<REUNION_UploadFileEntity>;
};

type REUNION_UploadFileEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UploadFileEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_UploadFileFiltersInput = {
  readonly alternativeText: InputMaybe<REUNION_StringFilterInput>;
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UploadFileFiltersInput>>>;
  readonly caption: InputMaybe<REUNION_StringFilterInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly ext: InputMaybe<REUNION_StringFilterInput>;
  readonly folder: InputMaybe<REUNION_UploadFolderFiltersInput>;
  readonly folderPath: InputMaybe<REUNION_StringFilterInput>;
  readonly formats: InputMaybe<REUNION_JSONFilterInput>;
  readonly hash: InputMaybe<REUNION_StringFilterInput>;
  readonly height: InputMaybe<REUNION_IntFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly mime: InputMaybe<REUNION_StringFilterInput>;
  readonly name: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_UploadFileFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UploadFileFiltersInput>>>;
  readonly previewUrl: InputMaybe<REUNION_StringFilterInput>;
  readonly provider: InputMaybe<REUNION_StringFilterInput>;
  readonly provider_metadata: InputMaybe<REUNION_JSONFilterInput>;
  readonly size: InputMaybe<REUNION_FloatFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly url: InputMaybe<REUNION_StringFilterInput>;
  readonly width: InputMaybe<REUNION_IntFilterInput>;
};

type REUNION_UploadFileInput = {
  readonly alternativeText: InputMaybe<Scalars['String']>;
  readonly caption: InputMaybe<Scalars['String']>;
  readonly ext: InputMaybe<Scalars['String']>;
  readonly folder: InputMaybe<Scalars['ID']>;
  readonly folderPath: InputMaybe<Scalars['String']>;
  readonly formats: InputMaybe<Scalars['REUNION_JSON']>;
  readonly hash: InputMaybe<Scalars['String']>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly mime: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly previewUrl: InputMaybe<Scalars['String']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly provider_metadata: InputMaybe<Scalars['REUNION_JSON']>;
  readonly size: InputMaybe<Scalars['Float']>;
  readonly url: InputMaybe<Scalars['String']>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type REUNION_UploadFileRelationResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UploadFileEntity>;
};

type REUNION_UploadFolder = {
  readonly children: Maybe<REUNION_UploadFolderRelationResponseCollection>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly files: Maybe<REUNION_UploadFileRelationResponseCollection>;
  readonly name: Scalars['String'];
  readonly parent: Maybe<REUNION_UploadFolderEntityResponse>;
  readonly path: Scalars['String'];
  readonly pathId: Scalars['Int'];
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};


type REUNION_UploadFolder_childrenArgs = {
  filters: InputMaybe<REUNION_UploadFolderFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_UploadFolder_filesArgs = {
  filters: InputMaybe<REUNION_UploadFileFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_UploadFolderEntity = {
  readonly attributes: Maybe<REUNION_UploadFolder>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_UploadFolderEntityResponse = {
  readonly data: Maybe<REUNION_UploadFolderEntity>;
};

type REUNION_UploadFolderEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UploadFolderEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_UploadFolderFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UploadFolderFiltersInput>>>;
  readonly children: InputMaybe<REUNION_UploadFolderFiltersInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly files: InputMaybe<REUNION_UploadFileFiltersInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly name: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_UploadFolderFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UploadFolderFiltersInput>>>;
  readonly parent: InputMaybe<REUNION_UploadFolderFiltersInput>;
  readonly path: InputMaybe<REUNION_StringFilterInput>;
  readonly pathId: InputMaybe<REUNION_IntFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_UploadFolderInput = {
  readonly children: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly files: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly parent: InputMaybe<Scalars['ID']>;
  readonly path: InputMaybe<Scalars['String']>;
  readonly pathId: InputMaybe<Scalars['Int']>;
};

type REUNION_UploadFolderRelationResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UploadFolderEntity>;
};

type REUNION_UsersPermissionsCreateRolePayload = {
  readonly ok: Scalars['Boolean'];
};

type REUNION_UsersPermissionsDeleteRolePayload = {
  readonly ok: Scalars['Boolean'];
};

type REUNION_UsersPermissionsLoginInput = {
  readonly identifier: Scalars['String'];
  readonly password: Scalars['String'];
  readonly provider: Scalars['String'];
};

type REUNION_UsersPermissionsLoginPayload = {
  readonly jwt: Maybe<Scalars['String']>;
  readonly user: REUNION_UsersPermissionsMe;
};

type REUNION_UsersPermissionsMe = {
  readonly blocked: Maybe<Scalars['Boolean']>;
  readonly confirmed: Maybe<Scalars['Boolean']>;
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly role: Maybe<REUNION_UsersPermissionsMeRole>;
  readonly username: Scalars['String'];
};

type REUNION_UsersPermissionsMeRole = {
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly type: Maybe<Scalars['String']>;
};

type REUNION_UsersPermissionsPasswordPayload = {
  readonly ok: Scalars['Boolean'];
};

type REUNION_UsersPermissionsPermission = {
  readonly action: Scalars['String'];
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly role: Maybe<REUNION_UsersPermissionsRoleEntityResponse>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};

type REUNION_UsersPermissionsPermissionEntity = {
  readonly attributes: Maybe<REUNION_UsersPermissionsPermission>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_UsersPermissionsPermissionFiltersInput = {
  readonly action: InputMaybe<REUNION_StringFilterInput>;
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UsersPermissionsPermissionFiltersInput>>>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly not: InputMaybe<REUNION_UsersPermissionsPermissionFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UsersPermissionsPermissionFiltersInput>>>;
  readonly role: InputMaybe<REUNION_UsersPermissionsRoleFiltersInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_UsersPermissionsPermissionRelationResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UsersPermissionsPermissionEntity>;
};

type REUNION_UsersPermissionsRegisterInput = {
  readonly email: Scalars['String'];
  readonly password: Scalars['String'];
  readonly username: Scalars['String'];
};

type REUNION_UsersPermissionsRole = {
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly description: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly permissions: Maybe<REUNION_UsersPermissionsPermissionRelationResponseCollection>;
  readonly type: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly users: Maybe<REUNION_UsersPermissionsUserRelationResponseCollection>;
};


type REUNION_UsersPermissionsRole_permissionsArgs = {
  filters: InputMaybe<REUNION_UsersPermissionsPermissionFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type REUNION_UsersPermissionsRole_usersArgs = {
  filters: InputMaybe<REUNION_UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_UsersPermissionsRoleEntity = {
  readonly attributes: Maybe<REUNION_UsersPermissionsRole>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_UsersPermissionsRoleEntityResponse = {
  readonly data: Maybe<REUNION_UsersPermissionsRoleEntity>;
};

type REUNION_UsersPermissionsRoleEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UsersPermissionsRoleEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_UsersPermissionsRoleFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UsersPermissionsRoleFiltersInput>>>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly description: InputMaybe<REUNION_StringFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly name: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_UsersPermissionsRoleFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UsersPermissionsRoleFiltersInput>>>;
  readonly permissions: InputMaybe<REUNION_UsersPermissionsPermissionFiltersInput>;
  readonly type: InputMaybe<REUNION_StringFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly users: InputMaybe<REUNION_UsersPermissionsUserFiltersInput>;
};

type REUNION_UsersPermissionsRoleInput = {
  readonly description: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly permissions: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly users: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type REUNION_UsersPermissionsUpdateRolePayload = {
  readonly ok: Scalars['Boolean'];
};

type REUNION_UsersPermissionsUser = {
  readonly blocked: Maybe<Scalars['Boolean']>;
  readonly confirmed: Maybe<Scalars['Boolean']>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly email: Scalars['String'];
  readonly provider: Maybe<Scalars['String']>;
  readonly role: Maybe<REUNION_UsersPermissionsRoleEntityResponse>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly username: Scalars['String'];
};

type REUNION_UsersPermissionsUserEntity = {
  readonly attributes: Maybe<REUNION_UsersPermissionsUser>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_UsersPermissionsUserEntityResponse = {
  readonly data: Maybe<REUNION_UsersPermissionsUserEntity>;
};

type REUNION_UsersPermissionsUserEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UsersPermissionsUserEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_UsersPermissionsUserFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UsersPermissionsUserFiltersInput>>>;
  readonly blocked: InputMaybe<REUNION_BooleanFilterInput>;
  readonly confirmationToken: InputMaybe<REUNION_StringFilterInput>;
  readonly confirmed: InputMaybe<REUNION_BooleanFilterInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly email: InputMaybe<REUNION_StringFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly not: InputMaybe<REUNION_UsersPermissionsUserFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_UsersPermissionsUserFiltersInput>>>;
  readonly password: InputMaybe<REUNION_StringFilterInput>;
  readonly provider: InputMaybe<REUNION_StringFilterInput>;
  readonly resetPasswordToken: InputMaybe<REUNION_StringFilterInput>;
  readonly role: InputMaybe<REUNION_UsersPermissionsRoleFiltersInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly username: InputMaybe<REUNION_StringFilterInput>;
};

type REUNION_UsersPermissionsUserInput = {
  readonly blocked: InputMaybe<Scalars['Boolean']>;
  readonly confirmationToken: InputMaybe<Scalars['String']>;
  readonly confirmed: InputMaybe<Scalars['Boolean']>;
  readonly email: InputMaybe<Scalars['String']>;
  readonly password: InputMaybe<Scalars['String']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly resetPasswordToken: InputMaybe<Scalars['String']>;
  readonly role: InputMaybe<Scalars['ID']>;
  readonly username: InputMaybe<Scalars['String']>;
};

type REUNION_UsersPermissionsUserRelationResponseCollection = {
  readonly data: ReadonlyArray<REUNION_UsersPermissionsUserEntity>;
};

type REUNION_Webpage = {
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly label: Maybe<Scalars['String']>;
  readonly meta_social: Maybe<ReadonlyArray<Maybe<REUNION_ComponentSharedMetaSocial>>>;
  readonly page_code: Maybe<Scalars['String']>;
  readonly page_components: Maybe<ReadonlyArray<Maybe<REUNION_WebpagePageComponentsDynamicZone>>>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly seo: Maybe<REUNION_ComponentSharedSeo>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly url: Maybe<Scalars['String']>;
  readonly website: Maybe<REUNION_WebsiteEntityResponse>;
};


type REUNION_Webpage_meta_socialArgs = {
  filters: InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_WebpageEntity = {
  readonly attributes: Maybe<REUNION_Webpage>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_WebpageEntityResponse = {
  readonly data: Maybe<REUNION_WebpageEntity>;
};

type REUNION_WebpageEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_WebpageEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_WebpageFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_WebpageFiltersInput>>>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly meta_social: InputMaybe<REUNION_ComponentSharedMetaSocialFiltersInput>;
  readonly not: InputMaybe<REUNION_WebpageFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_WebpageFiltersInput>>>;
  readonly page_code: InputMaybe<REUNION_StringFilterInput>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly seo: InputMaybe<REUNION_ComponentSharedSeoFiltersInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly url: InputMaybe<REUNION_StringFilterInput>;
  readonly website: InputMaybe<REUNION_WebsiteFiltersInput>;
};

type REUNION_WebpageInput = {
  readonly label: InputMaybe<Scalars['String']>;
  readonly meta_social: InputMaybe<ReadonlyArray<InputMaybe<REUNION_ComponentSharedMetaSocialInput>>>;
  readonly page_code: InputMaybe<Scalars['String']>;
  readonly page_components: InputMaybe<ReadonlyArray<Scalars['REUNION_WebpagePageComponentsDynamicZoneInput']>>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly seo: InputMaybe<REUNION_ComponentSharedSeoInput>;
  readonly url: InputMaybe<Scalars['String']>;
  readonly website: InputMaybe<Scalars['ID']>;
};

type REUNION_WebpagePageComponentsDynamicZone = REUNION_ComponentPageContentButton | REUNION_ComponentPageContentCard | REUNION_ComponentPageContentForm | REUNION_ComponentPageContentHeroSection | REUNION_ComponentPageContentHighlightSection | REUNION_ComponentPageContentInputBox | REUNION_ComponentPageContentLink | REUNION_ComponentPageContentListOfCards | REUNION_ComponentPageContentSection | REUNION_Error;

type REUNION_WebpageRelationResponseCollection = {
  readonly data: ReadonlyArray<REUNION_WebpageEntity>;
};

type REUNION_Website = {
  readonly base_url: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly favicon: Maybe<REUNION_WebsiteAssetEntityResponse>;
  readonly footer: Maybe<REUNION_FooterEntityResponse>;
  readonly header: Maybe<REUNION_HeaderEntityResponse>;
  readonly label: Maybe<Scalars['String']>;
  readonly page_title_prefix: Maybe<Scalars['String']>;
  readonly page_title_suffix: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly webpages: Maybe<REUNION_WebpageRelationResponseCollection>;
};


type REUNION_Website_webpagesArgs = {
  filters: InputMaybe<REUNION_WebpageFiltersInput>;
  pagination?: InputMaybe<REUNION_PaginationArg>;
  publicationState?: InputMaybe<REUNION_PublicationState>;
  sort?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type REUNION_WebsiteAsset = {
  readonly createdAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly label: Maybe<Scalars['String']>;
  readonly library: Maybe<Scalars['String']>;
  readonly media: Maybe<REUNION_UploadFileEntityResponse>;
  readonly publishedAt: Maybe<Scalars['REUNION_DateTime']>;
  readonly type: Maybe<REUNION_ENUM_WEBSITEASSET_TYPE>;
  readonly updatedAt: Maybe<Scalars['REUNION_DateTime']>;
};

type REUNION_WebsiteAssetEntity = {
  readonly attributes: Maybe<REUNION_WebsiteAsset>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_WebsiteAssetEntityResponse = {
  readonly data: Maybe<REUNION_WebsiteAssetEntity>;
};

type REUNION_WebsiteAssetEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_WebsiteAssetEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_WebsiteAssetFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_WebsiteAssetFiltersInput>>>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly library: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_WebsiteAssetFiltersInput>>>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly type: InputMaybe<REUNION_StringFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
};

type REUNION_WebsiteAssetInput = {
  readonly label: InputMaybe<Scalars['String']>;
  readonly library: InputMaybe<Scalars['String']>;
  readonly media: InputMaybe<Scalars['ID']>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly type: InputMaybe<REUNION_ENUM_WEBSITEASSET_TYPE>;
};

type REUNION_WebsiteEntity = {
  readonly attributes: Maybe<REUNION_Website>;
  readonly id: Maybe<Scalars['ID']>;
};

type REUNION_WebsiteEntityResponse = {
  readonly data: Maybe<REUNION_WebsiteEntity>;
};

type REUNION_WebsiteEntityResponseCollection = {
  readonly data: ReadonlyArray<REUNION_WebsiteEntity>;
  readonly meta: REUNION_ResponseCollectionMeta;
};

type REUNION_WebsiteFiltersInput = {
  readonly and: InputMaybe<ReadonlyArray<InputMaybe<REUNION_WebsiteFiltersInput>>>;
  readonly base_url: InputMaybe<REUNION_StringFilterInput>;
  readonly createdAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly favicon: InputMaybe<REUNION_WebsiteAssetFiltersInput>;
  readonly footer: InputMaybe<REUNION_FooterFiltersInput>;
  readonly header: InputMaybe<REUNION_HeaderFiltersInput>;
  readonly id: InputMaybe<REUNION_IDFilterInput>;
  readonly label: InputMaybe<REUNION_StringFilterInput>;
  readonly not: InputMaybe<REUNION_WebsiteFiltersInput>;
  readonly or: InputMaybe<ReadonlyArray<InputMaybe<REUNION_WebsiteFiltersInput>>>;
  readonly page_title_prefix: InputMaybe<REUNION_StringFilterInput>;
  readonly page_title_suffix: InputMaybe<REUNION_StringFilterInput>;
  readonly publishedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly updatedAt: InputMaybe<REUNION_DateTimeFilterInput>;
  readonly webpages: InputMaybe<REUNION_WebpageFiltersInput>;
};

type REUNION_WebsiteInput = {
  readonly base_url: InputMaybe<Scalars['String']>;
  readonly favicon: InputMaybe<Scalars['ID']>;
  readonly footer: InputMaybe<Scalars['ID']>;
  readonly header: InputMaybe<Scalars['ID']>;
  readonly label: InputMaybe<Scalars['String']>;
  readonly page_title_prefix: InputMaybe<Scalars['String']>;
  readonly page_title_suffix: InputMaybe<Scalars['String']>;
  readonly publishedAt: InputMaybe<Scalars['REUNION_DateTime']>;
  readonly webpages: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};


}
